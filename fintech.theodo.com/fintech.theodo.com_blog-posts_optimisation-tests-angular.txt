Optimisation des tests web avec Angular Testing Library
 Â Sipios devient TheodoÂ FinTech, lâentitÃ© experte Services Financiers du groupe Theodo 
ClientsOffresMobile Wealth ManagementFintechÂ Due DiligenceMVPÂ at scaleConception et design UX/UIProgramme d'APIsationFinTech as a serviceExpertisesReactJSOpen BankingSpring BootKotlinBlog

Tech

BusinessCarriÃ¨re

Equipe


Nous rejoindreContactOptimisation des tests web avec Angular Testing Library8 minutesMis Ã  jour le7/6/2024Share this postGuide pratique : amÃ©liorez la qualitÃ© de vos tests web avec Angular Testing Library et Jest, pour une application Angular plus fiable.#Angular#TestingBrice ConrauxSoftware EngineerChez Sipios, nous croyons que lâoptimisation des tests des applications web est essentielle pour garantir la qualitÃ© et la fiabilitÃ© de notre code.Les tests permettent de vÃ©rifier que chaque composant de votre application fonctionne comme prÃ©vu, rÃ©pond correctement aux interactions des utilisateurs et reste robuste face aux modifications futures. De plus, des tests bien Ã©crits peuvent servir de documentation, fournissant des indications sur le comportement attendu de l'application. Pour les dÃ©veloppeurs utilisant Angular avec Jest, l'intÃ©gration d'Angular Testing Library (ATL) peut considÃ©rablement simplifier et amÃ©liorer le processus de test. Cette bibliothÃ¨que offre des outils et des mÃ©thodes plus intuitifs pour Ã©crire des tests qui simulent les interactions rÃ©elles des utilisateurs.Cet article vous guidera Ã  travers la mise en Åuvre d'Angular Testing Library dans un projet Angular existant utilisant Jest. Nous explorerons les fonctionnalitÃ©s clÃ©s d'ATL, notamment render, screen, userEvent et fireEvent, et comment elles peuvent rendre nos tests plus simples et plus efficaces.Configuration d'Angular Testing LibraryCet article suppose que vous avez dÃ©jÃ  un projet Angular existant que vous souhaitez tester avec Jest installÃ©. Pour ceux qui commencent tout juste, je recommande de suivre le tutoriel officiel Angular Tour of Heroes. Ce tutoriel offre une excellente introduction Ã  Angular et vous aidera Ã  crÃ©er une application oÃ¹ vous pourrez ensuite appliquer les concepts abordÃ©s dans cet article.1. Installation des dÃ©pendancesPour commencer, nous devons installer Angular Testing Library et ses dÃ©pendances dans notre projet Angular. ExÃ©cutons les commandes suivantes dans notre terminal :2. Configuration de JestEnsuite, assurons-nous que Jest est correctement configurÃ© dans notre projet. Nous devrions avoir un fichier jest.config.js Ã  la racine de notre projet. Voici un exemple de configuration pour un projet Angular :DÃ©tails du fichier setup-jest.tsLe fichier setup-jest.ts est utilisÃ© pour ajouter des configurations spÃ©cifiques Ã  Jest avant l'exÃ©cution des tests. Dans ce cas, nous ajoutons des matchers supplÃ©mentaires fournis par Jest DOM pour faciliter les assertions sur le DOM.Ãcrire des tests avec Angular Testing LibraryExemple de composantPour illustrer l'utilisation de l'Angular Testing Library, nous allons utiliser un composant du tutoriel officiel Angular Tour of Heroes. Prenons comme exemple le HeroDetailComponent :Tester le composantAngular Testing Library nous permet de rendre dynamiquement le composant que nous voulons tester et d'interagir avec lui. Il existe une fonction dÃ©diÃ©e pour configurer le composant et personnaliser ses propriÃ©tÃ©s, imports et services injectÃ©s : renderIci, nous utilisons un composant basique, ce qui rend l'utilisation de render simple. Cependant, render peut Ã©galement Ãªtre utilisÃ© pour des composants plus complexes et permet une configuration similaire Ã  celle de TestBed, couramment utilisÃ©. Pour voir toute la puissance de cette fonction, je vous recommande de consulter la documentation d'Angular Testing Library.Recherche dans l'Ã©cran renduAvertissement : Veuillez noter que get, query, find et byRole, byText ne sont pas des mÃ©thodes en elles-mÃªmes. Dans la partie suivante, nous parlerons de ces diffÃ©rentes parties sÃ©parÃ©ment afin de comprendre leur utilisation. Cependant, elles doivent toujours Ãªtre associÃ©es ensemble pour une utilisation correcte. Par exemple, utiliser getByText, queryByRole ou findByText sont des combinaisons fonctionnelles.Angular Testing Library fournit plusieurs mÃ©thodes pour rechercher des Ã©lÃ©ments rendus Ã  l'Ã©cran. Les principales mÃ©thodes sont get, find, et query, chacune avec des variantes comme ByText et ByRole. Voici comment les utiliser et les diffÃ©rences entre elles :getBy : UtilisÃ© pour trouver un Ã©lÃ©ment de maniÃ¨re synchrone. Si l'Ã©lÃ©ment n'est pas trouvÃ©, une erreur est levÃ©e.queryBy : UtilisÃ© pour trouver un Ã©lÃ©ment de maniÃ¨re synchrone sans lever d'erreur si l'Ã©lÃ©ment n'est pas trouvÃ©. Retourne null si l'Ã©lÃ©ment n'est pas trouvÃ©.findBy : UtilisÃ© pour trouver un Ã©lÃ©ment de maniÃ¨re asynchrone. Il attend que l'Ã©lÃ©ment apparaisse dans le DOM. Utile pour les tests impliquant des opÃ©rations asynchrones.Dans tous les cas, ces mÃ©thodes lÃ¨vent une erreur si plusieurs Ã©lÃ©ments correspondants sont trouvÃ©s. Cependant, elles ont toutes des variantes (getAllBy, queryAllBy, findAllBy).Exemple de test avec diffÃ©rentes mÃ©thodes de rechercheVariantesIl existe de nombreuses variantes Ã  ajouter Ã  nos trois prÃ©fixes (get, query, find) pour rechercher le DOM rendu. Voici deux des plus utiles :ByText : Recherche un Ã©lÃ©ment par son texte visible. UtilisÃ© pour vÃ©rifier le contenu textuel.ByRole : Recherche un Ã©lÃ©ment par son rÃ´le ARIA. UtilisÃ© pour vÃ©rifier les Ã©lÃ©ments interactifs tels que les boutons, les liens, etc.Avantages des diffÃ©rentes mÃ©thodesgetBy : Rapide et direct pour vÃ©rifier la prÃ©sence immÃ©diate d'un Ã©lÃ©ment. IdÃ©al pour les tests synchrones.queryBy : Permet de vÃ©rifier qu'un Ã©lÃ©ment n'est pas prÃ©sent sans dÃ©clencher d'erreur, utile pour les assertions nÃ©gatives.findBy : Attend que l'Ã©lÃ©ment apparaisse, ce qui est utile pour les tests asynchrones impliquant des API ou des animations.ByText et ByRole : Fournissent des moyens spÃ©cifiques pour cibler les Ã©lÃ©ments en fonction de leur texte ou de leur rÃ´le, rendant les tests plus lisibles et comprÃ©hensibles.Ces mÃ©thodes de recherche rendent les tests plus intuitifs et alignÃ©s sur les interactions rÃ©elles des utilisateurs, amÃ©liorant la robustesse et la maintenabilitÃ© de vos tests.Gestion des Ã©lÃ©ments inaccessiblesParfois, vous pouvez rencontrer des Ã©lÃ©ments inaccessibles via les mÃ©thodes getBy, surtout s'ils ont des noms vides ou manquent d'attributs ARIA appropriÃ©s. Voici quelques stratÃ©gies pour gÃ©rer ces situations :AmÃ©liorer l'accessibilitÃ© : Assurez-vous que tous les Ã©lÃ©ments interactifs ont des noms et des rÃ´les accessibles. Utilisez des attributs ARIA si nÃ©cessaire pour amÃ©liorer l'accessibilitÃ©.Utiliser des requÃªtes avec des sÃ©lecteurs : Pour les Ã©lÃ©ments difficiles d'accÃ¨s, envisagez d'utiliser des requÃªtes telles que getByTestId ou getByLabelText pour cibler les Ã©lÃ©ments en fonction de leurs attributs.Exemple de gestion des Ã©lÃ©ments inaccessiblesDÃ©clenchement d'un Ã©vÃ©nement utilisateurPour tester si le bouton "Save" appelle correctement la mÃ©thode save lorsqu'il est cliquÃ©, nous utiliserons jest.spyOn pour espionner la mÃ©thode et userEvent pour simuler le clic.Ici, nous simulons simplement un clic. Cependant, userEvent permet de tester un Ã©ventail beaucoup plus large d'interactions utilisateur. Pour une liste complÃ¨te, je vous invite Ã  consulter la documentation d'Angular Testing Library liÃ©e. Vous trouverez juste en bas une liste des quelques avantages Ã  utiliser userEvent.Avantages de userEventSimulation rÃ©aliste des interactions utilisateurNaturelle et complÃ¨te : userEvent permet une simulation plus complÃ¨te des interactions utilisateur. Par exemple, un clic de souris n'est pas seulement un Ã©vÃ©nement isolÃ© mais une sÃ©rie d'actions (clic, relÃ¢chement, focus, etc.). userEvent.click simule ces actions de maniÃ¨re rÃ©aliste, ce qui est essentiel pour tester des comportements complexes.DÃ©lais simulÃ©s : Les actions simulÃ©es avec userEvent incluent des dÃ©lais rÃ©alistes entre les Ã©vÃ©nements, ce qui peut rÃ©vÃ©ler des problÃ¨mes de synchronisation ou des conditions de concurrence qui pourraient ne pas Ãªtre dÃ©tectÃ©s autrement.PrÃ©cision et robustesse des testsPrÃ©cision accrue : Les interactions simulÃ©es avec userEvent sont plus proches des actions rÃ©elles des utilisateurs, rendant les tests plus prÃ©cis et reprÃ©sentatifs des scÃ©narios d'utilisation rÃ©els.Robustesse : Les tests utilisant userEvent sont moins susceptibles de passer Ã  cÃ´tÃ© de bugs subtils liÃ©s aux Ã©vÃ©nements utilisateur. En simulant des interactions complÃ¨tes, ces tests peuvent dÃ©tecter des erreurs qui n'apparaissent que dans des conditions d'utilisation spÃ©cifiques.ClartÃ© et maintenabilitÃ© du codeLisibilitÃ© : Les tests Ã©crits avec userEvent sont faciles Ã  lire et Ã  comprendre. Les fonctions telles que userEvent.click, userEvent.type et userEvent.clear dÃ©crivent explicitement les actions de l'utilisateur, rendant les tests plus intuitifs.MaintenabilitÃ© : La clartÃ© et la prÃ©cision des tests Ã©crits avec userEvent amÃ©liorent la maintenabilitÃ© du code de test. Les dÃ©veloppeurs peuvent facilement comprendre et mettre Ã  jour les tests Ã  mesure que les interactions utilisateur Ã©voluent.Utilisation de son Ã©quivalent, fireEventfireEvent est une mÃ©thode fournie par Testing Library pour dÃ©clencher des Ã©vÃ©nements DOM de maniÃ¨re programmatique. Bien pratique pour des cas simples, fireEvent ne simule pas les interactions utilisateur avec le mÃªme rÃ©alisme que userEvent. Contrairement Ã  userEvent, qui reproduit une sÃ©quence complÃ¨te d'actions (y compris les dÃ©lais naturels entre un "clic" et un "relÃ¢chement" de la souris), fireEvent dÃ©clenche uniquement l'Ã©vÃ©nement ciblÃ© sans ces dÃ©tails supplÃ©mentaires. Cela peut suffire pour des tests unitaires basiques, mais pour des tests d'interaction utilisateur plus rÃ©alistes et reprÃ©sentatifs, userEvent est gÃ©nÃ©ralement prÃ©fÃ©rÃ©.Optimisation des performances des testsBien que Angular Testing Library (ATL) propose des outils puissants pour les tests, elle est Ã©galement relativement lourde et peut affecter les temps d'exÃ©cution de votre CI. Il est important d'utiliser ATL avec discernement pour Ã©viter les problÃ¨mes de performances. Voici quelques conseils pour amÃ©liorer le temps d'exÃ©cution de vos tests :Tests sÃ©lectifs : Utilisez ATL pour les composants nÃ©cessitant des tests d'interaction dÃ©taillÃ©s. Pour des tests plus simples, envisagez d'utiliser les utilitaires de test intÃ©grÃ©s Ã  Jest.Configuration efficace : Minimisez le code de configuration dans vos tests. RÃ©utilisez le code de configuration dans plusieurs tests lorsque cela est possible.Simulation de services : Simulez les services et les dÃ©pendances pour rÃ©duire la complexitÃ© et le temps d'exÃ©cution de vos tests.Tests parallÃ¨les : Configurez Jest pour exÃ©cuter les tests en parallÃ¨le. Cela peut rÃ©duire significativement le temps total nÃ©cessaire Ã  l'exÃ©cution des tests.ConclusionIntÃ©grer Angular Testing Library avec Jest dans un projet Angular existant peut considÃ©rablement amÃ©liorer votre flux de travail de test. Les outils et mÃ©thodes fournis par ATL sont conÃ§us pour rendre vos tests plus simples, plus intuitifs et plus proches des interactions rÃ©elles avec les utilisateurs. En suivant les Ã©tapes et exemples dÃ©crits dans cet article, vous serez bien Ã©quipÃ© pour Ã©crire des tests robustes et faciles Ã  entretenir pour vos applications Angular.âCopyright Â©2023 TheodoÂ FinTech. Tous droits rÃ©servÃ©s.EquipeNous rejoindreContactTheodoPolitique de confidentialitÃ©Mentions lÃ©gales