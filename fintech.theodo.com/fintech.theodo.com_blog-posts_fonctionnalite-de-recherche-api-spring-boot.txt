Ajoutez une fonctionnalitÃ© de recherche complÃ¨te Ã  votre API Spring Boot !
 Â Sipios devient TheodoÂ FinTech, lâentitÃ© experte Services Financiers du groupe Theodo 
ClientsOffresMobile Wealth ManagementFintechÂ Due DiligenceMVPÂ at scaleConception et design UX/UIProgramme d'APIsationFinTech as a serviceExpertisesReactJSOpen BankingSpring BootKotlinBlog

Tech

BusinessCarriÃ¨re

Equipe


Nous rejoindreContactAjoutez une fonctionnalitÃ© de recherche complÃ¨te Ã  votre API Spring Boot !5 minutesMis Ã  jour le24/6/2024Share this postAjoutez en 10 minutes une fonctionnalitÃ© de recherche avancÃ©e Ã  votre API Spring Boot grÃ¢ce Ã  la bibliothÃ¨que spring search !#API#Spring Boot#Java#Open Source#REST#Filtre#RechercheVincent EscoffierSoftware EngineerDans cet article, nous allons voir comment ajouter un endpoint Ã  notre API Spring Boot 3 nous permettant de filtrer lâensemble des champs dâune entitÃ© et de combiner les opÃ©rateurs logiques en utilisant les query parameters de lâURL. Voyez par exemple :âIl est trÃ¨s frÃ©quent de devoir dÃ©velopper une fonctionnalitÃ© permettant de filtrer les donnÃ©es exposÃ©es par notre API. Imaginez que vous dÃ©veloppez une API pour un site de vente de voitures. Les utilisateurs ne sont pas intÃ©ressÃ©s par toutes les voitures, mais seulement par celles qui correspondent Ã  leurs critÃ¨res, tels que la marque, le modÃ¨le, le kilomÃ©trage, le prix, etc. Vous pouvez commencer par dÃ©finir plusieurs endpoints sur votre API pour permettre de filtrer chaque champs. Cependant, plus votre modÃ¨le de donnÃ©es grandit, plus il devient compliquÃ© de couvrir l'ensemble des cas d'usage et votre code gÃ©rant la recherche peut devenir de plus en plus complexe Ã  faire Ã©voluer. De plus, vous ne pouvez pas connaÃ®tre Ã  lâavance toutes les recherches qui pourraient intÃ©resser vos utilisateurs et souhaitez vous offrir une certaine flexibilitÃ©.Dans notre cas, nous aimerions pouvoir permettre au client de gÃ©nÃ©rer une reprÃ©sentation contenant Ã  peu prÃ¨s n'importe quel sous-ensemble de donnÃ©es selon les filtres qu'il souhaite, et cela sans avoir Ã  modifier notre code Ã  chaque changement du modÃ¨le !Plusieurs aspects sont Ã  prendre en compte pour la mise en place dâun tel pattern :DÃ©finition dâun Domain Specific Language permettant d'exprimer la requÃªte (opÃ©rateurs, syntaxe, etc.), pensez par exemple au langage de recherche de Github.Parsing de la requÃªte, pour la convertir en un objet manipulable par votre backend, par exemple par lâintermÃ©diaire dâun AST.Filtrage des donnÃ©es, transformation de lâAST en une requÃªte SQL, une pipeline Mongo, etc..Tout implÃ©menter from scratch nÃ©cessite une quantitÃ© de code non nÃ©gligeable quâil faudra ensuite maintenir et tester. Nous allons voir dans cet article comment adopter ce pattern avec la bibliothÃ¨que Spring Search. A la fin de cet article, nous aurons un endpoint nous permettant de filtrer lâensemble des champs de notre entitÃ© et de combiner les opÃ©rateurs logiques, et tout cela grÃ¢ce une simple annotation dans notre controller !â ï¸ Gardez Ã  l'esprit qu'implÃ©menter un tel systÃ¨me de filtres peut se retourner contre vous ! Vous donnez toute la libertÃ© Ã  l'utilisateur de faire des requÃªtes complexes, alambiquÃ©es et potentiellement coÃ»teuses pour votre API. Il est Ã©galement trÃ¨s difficile dâimplÃ©menter un systÃ¨me de cache car les combinaisons sont potentiellement illimitÃ©es. Dans le cas oÃ¹ un nombre raisonnable d'endpoints vous permettrait de couvrir l'ensemble des cas d'usage, il est souvent prÃ©fÃ©rable d'avoir des endpoints prÃ©dÃ©finis, optimisÃ©es en termes de performances et rÃ©pondant Ã  un cas dâusage prÃ©cis. Je vous invite Ã  consulter cet article pour en savoir plus sur les inconvÃ©nients de ce pattern.Place Ã  la pratique : Spring SearchPrenons comme rÃ©fÃ©rence lâentitÃ© suivante :Nous allons dans cet article ajouter une route sur notre API nous permettant de filtrer nos voitures ð !CommenÃ§ons par ajouter la dÃ©pendance spring-search, la bibliothÃ¨que est compatible avec spring-boot 3.X.Ajoutons ensuite une classe de @Configuration pour enregistrer notre resolverAjoutons Ã©galement un repository annotÃ© avec RepositoryRestResource et hÃ©ritant de JpaSpecificationExecutorNous nâavons finalement plus quâÃ  utiliser lâannotation SearchSpec dans notre controllerEt câest tout ! Vous pouvez maintenant interroger le endpoint suivant pour tester notre nouvelle route ð.De nombreux opÃ©rateurs sont disponibles, tel que Ã©gal, supÃ©rieur, infÃ©rieur, ET/OU logiques, etc. Vous pouvez trouver la liste complÃ¨te ici.Pour retrouver le code de lâarticle, câest ici.ConclusionPlutÃ´t que de dÃ©velopper et de maintenir une grande quantitÃ© de code spÃ©cifique pour chaque filtre et chaque entitÃ©, vous pouvez ajouter une fonctionnalitÃ© de recherche complÃ¨te Ã  votre API grÃ¢ce Ã  une simple annotation dans votre controller.Pour plus dâinformations, nâhÃ©sitez pas Ã  consulter le code source de spring-search, ainsi quâÃ  contribuer !âCopyright Â©2023 TheodoÂ FinTech. Tous droits rÃ©servÃ©s.EquipeNous rejoindreContactTheodoPolitique de confidentialitÃ©Mentions lÃ©gales