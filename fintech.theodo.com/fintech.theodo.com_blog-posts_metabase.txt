Metabase: MaintenabilitÃ© et accessibilitÃ© de vos dashboards
 Â Sipios devient TheodoÂ FinTech, lâentitÃ© experte Services Financiers du groupe Theodo 
ClientsOffresMobile Wealth ManagementFintechÂ Due DiligenceMVPÂ at scaleConception et design UX/UIProgramme d'APIsationFinTech as a serviceExpertisesReactJSOpen BankingSpring BootKotlinBlog

Tech

BusinessCarriÃ¨re

Equipe


Nous rejoindreContactMetabase: MaintenabilitÃ© et accessibilitÃ© de vos dashboards5 minutesMis Ã  jour le14/6/2024Share this postDÃ©couvrez comment crÃ©er des tableaux de bord efficaces et maintenables sur Metabase, un outil de BI puissant, pour amÃ©liorer la qualitÃ© de vos donnÃ©es. #Metabase#BI#DataQuality#DashboardThibault EspagnolSoftware EngineerIntroductionMetabase est un puissant outil de Business Intelligence (BI) qui permet aux utilisateurs, quel que soit leur niveau de compÃ©tence technique, d'analyser et de visualiser facilement leurs donnÃ©es, afin de prendre des dÃ©cisions Ã©clairÃ©es et d'optimiser leurs performances commerciales.Cet article n'est pas un tutoriel sur l'utilisation de Metabase. Si vous n'Ãªtes pas encore familier avec cet outil et souhaitez en apprendre davantage, je vous invite Ã  consulter ce lien qui explique les fondamentaux. Si vous maÃ®trisez dÃ©jÃ  l'outil, commenÃ§ons sans plus tarder !CrÃ©er des dashboards efficaces et maintenables sur Metabase est essentiel pour tirer le meilleur parti de vos donnÃ©es. Cet article s'adresse principalement aux dÃ©veloppeurs et aux crÃ©ateurs de dashboards qui souhaitent optimiser leur utilisation de Metabase.L'objectif de cet article est de vous aider Ã  Ã©viter les erreurs courantes telles que la "SQL obsession", l'architecture non dÃ©finie et la duplication de la logique de filtrage, tout en proposant des solutions pratiques pour amÃ©liorer la qualitÃ© et l'efficacitÃ© de vos dashboards Metabase. Je vais donc vous prÃ©senter 3 smells Ã  ne pas reproduire si vous voulez confectionner des dashboards maintenables.SQL ObsessionQu'est-ce que c'est ?Comme vous pouvez le deviner si vous connaissez le code smell d'obsession primitive, l'obsession SQL consiste Ã  poser trop de questions SQL ou native mÃªme quand Ã§a nâest pas nÃ©cessaire.Pourquoi est-ce mauvais ?Ã moins que votre Ã©quipe ne soit composÃ©e de maÃ®tres en SQL, l'interface de Metabase est meilleure. La premiÃ¨re fois que j'ai vu ce conseil, j'ai pensÃ© qu'il Ã©tait destinÃ© aux utilisateurs occasionnels de Metabase. Cependant, aprÃ¨s plusieurs mois, j'ai dÃ» revenir et modifier certains tableaux de bord de mon projet, et il Ã©tait vraiment difficile de me rappeler ce que j'avais fait au premier coup d'Åil. J'ai alors progressivement migrÃ© vers des questions utilisant l'interface de Metabase, et voici pourquoi l'utilisation excessive des questions SQL Ã©tait une erreur :RÃ©duction de l'accessibilitÃ© : Les questions via interface permettent entre autres de redonner la main de la data au mÃ©tier. En utilisant des questions SQL, vous rÃ©duisez l'accessibilitÃ© de votre tableau de bord. En effet, grÃ¢ce Ã  l'interface de Metabase, n'importe qui peut contribuer Ã  votre tableau de bord mÃªme sans connaÃ®tre le langage SQL. En utilisant des questions SQL, vous crÃ©ez des questions que certains membres de votre Ã©quipe ne comprendraient pas et ne pourraient pas maintenir.ComplexitÃ© et maintenance : Les questions SQL rendent votre tableau de bord beaucoup plus complexe et difficile Ã  maintenir. Au dÃ©but, votre question peut sembler facile Ã  comprendre, mais lorsque vous y reviendrez aprÃ¨s plusieurs mois, vous constaterez qu'elle n'Ã©tait pas si claire et facile Ã  comprendre. En outre, si votre Ã©quipe a pour habitude d'utiliser des requÃªtes SQL, une seule requÃªte complexe et mal rÃ©digÃ©e par l'un de vos dÃ©veloppeurs peut rendre la comprÃ©hension et la maintenance de votre tableau de bord particuliÃ¨rement difficile, lÃ  oÃ¹ les questions via lâinterface metabase sont plus standardisÃ©es.Priorisez Ã©galement les questions metabase aux snippets. Les questions crÃ©Ã©es avec l'interface de Metabase ont plusieurs avantages par rapport aux snippets SQL :Historique et restauration : Les questions sont historisÃ©es, permettant de revenir Ã  des versions prÃ©cÃ©dentes, contrairement aux snippets SQL.Coloration syntaxique : Les questions SQL bÃ©nÃ©ficient de la coloration syntaxique lors de leur Ã©dition.Visualisation : Vous pouvez visualiser les questions en exÃ©cutant la requÃªte directement dans Metabase.Pas de limite de taille : Les questions n'ont pas de limite de taille, contrairement aux snippets SQL qui sont limitÃ©s (Ã  environ 10 000 caractÃ¨res).Cas d'utilisation des snippets SQL : Le seul avantage des snippets est que vous pouvez utiliser du code SQL incomplet ou les appliquer Ã  plusieurs questions provenant de bases de donnÃ©es diffÃ©rentes.âQue dois-je faire alors ?Le but ici n'est pas d'Ã©viter les questions SQL, mais de ne les utiliser que lorsque c'est nÃ©cessaire. Vous pouvez recourir Ã  des requÃªtes SQL et, dans certains cas, il n'y a pas d'autre possibilitÃ©. Cependant, n'oubliez pas de garder Ã  l'esprit l'objectif visÃ© par leur utilisation.Rappelez-vous que vous n'Ãªtes pas seul sur un projet et que d'autres collaborateurs pourraient avoir du mal Ã  lire votre question plus tard. Gardez Ã  l'esprit que Metabase offre de nombreuses fonctionnalitÃ©s pour rÃ©pondre Ã  la plupart de vos besoins.Essayez d'abord d'utiliser des options disponibles sur Metabase comme les colonnes personnalisÃ©es avant de recourir Ã  une requÃªte SQL. Ensuite, si vous devez crÃ©er votre propre requÃªte, essayez de rÃ©duire son pÃ©rimÃ¨tre, utilisez une autre question dans votre question SQL, puis rÃ©utilisez-la dans une autre question de l'interface Metabase.Vous pouvez mÃªme dÃ©crire l'objectif de votre question afin que d'autres utilisateurs de votre tableau de bord qui ne connaissent pas SQL puissent au moins comprendre votre question.Astuce :Nous pouvons rÃ©utiliser des questions avec {{#<id-request>}}, vous pouvez voir simplement lâid de votre question en dernier paramÃ¨tre de lâurl de votre question comme ici : http://localhost:3000/question/27-commandesGod folder & Undefined ArchitectureQu'est-ce que c'est ?Un "god folder" ou une architecture indÃ©finie consiste Ã  avoir toutes vos questions dans un seul dossier ou Ã  ne pas savoir oÃ¹ aller pour trouver ce que vous cherchez, ce qui peut vous causer beaucoup de maux de tÃªte lorsque vous essayez de trouver une question.Voici Ã  quoi ressemblerait une architecture en god folder (on peut imaginer ce que Ã§a donnerait avec plus de question)Pourquoi est-ce mauvais ?Cela vous fera perdre du temps. Comme dans tout projet, l'architecture est cruciale pour sa maintenabilitÃ©. Si vous arrivez sur un projet dans lequel Metabase n'est pas une prioritÃ©, vous trouverez souvent des tableaux de bord Metabase avec beaucoup de "god folders" contenant diffÃ©rents types de questions sans aucune structure.Mais dÃ©cider d'une architecture n'est jamais une perte de temps, cela vous permettra de mettre en Åuvre de nouvelles fonctionnalitÃ©s plus rapidement et en toute sÃ©curitÃ©, et dâonboarder de nouvelles personnes rapidement.Que dois-je faire ?Trouvez une architecture qui convient Ã  votre projet. Typiquement, sur mon projet, avoir un dossier par Ã©quipe, puis par site, et diviser chaque question par type ("questions de donnÃ©es" et "questions d'analyses" le premier dossier pour rÃ©cupÃ©rer les donnÃ©es mâintÃ©ressant et le deuxiÃ¨me dossier pour crÃ©er les graphiques qui seront prÃ©sentÃ©s dans mon tableau de bord) est suffisant, car nous n'avons pas beaucoup de questions. Mais si vous en avez beaucoup, je vous recommande de trouver une architecture plus spÃ©cifique.Voici les mÃªmes questions prÃ©sentÃ© juste avant, cette fois-ci sous une autre architectureDuplication de la logique de filtrageQu'est-ce que c'est ?La duplication de la logique de filtrage est l'absence de centralisation des filtres, c'est-Ã -dire filtrer vos donnÃ©es avec le mÃªme filtre dans plusieurs questions. De mÃªme, bien quâayant en gÃ©nÃ©ral moins dâimpact, si vous appliquez des transformations de donnÃ©es diffÃ©rentes, telles que le formatage des dates, sur chaque graphique, cela peut Ã©galement nuire Ã  la comprÃ©hension globale de la donnÃ©e.Par exemple, si vous avez une question pour afficher votre CA/mois sur vos produits, que vous faites cette question :âOu mÃªme cette question via lâinterface :Alors, vous faites surement de la duplication de logique de filtrage puisque ce filtre est susceptible dâÃªtre utilisÃ© un jour ou lâautre dans une autre question de votre dashboard si ce nâest pas dÃ©jÃ  le cas.Pourquoi est-ce mauvais ?RÃ©duction de la productivitÃ© : DÃ©velopper vos filtres plusieurs fois vous fera perdre plus de temps que de les centraliser.Augmentation du risque d'erreurs : Dupliquer vos filtres augmente considÃ©rablement les chances que vos tableaux de bord soient incohÃ©rents, car vous pourriez oublier un Ã©lÃ©ment dans l'un de vos filtres de l'une de vos questions.Diminution de la flexibilitÃ© et de la maintenabilitÃ© : DÃ¨s que vous devez changer vos filtres, vous devrez alors les changer tous, ce qui se traduit par plus de travail et un risque accru d'introduire des erreurs.Que dois-je faire alors ?La meilleure pratique est de crÃ©er des modÃ¨les pour centraliser les filtres et les transformations. En effet, il est prÃ©fÃ©rable de crÃ©er un modÃ¨le par pÃ©rimÃ¨tre/tableau de bord, puis chaque question de votre tableau de bord commence Ã  partir de ce modÃ¨le afin que tous vos filtres ou transformations proviennent du mÃªme endroit.[DÃ©finition dâun modÃ¨le]Vous pouvez convertir simplement une question en modÃ¨le, voici les Ã©tapes Â Ã  partir dâune simple question :Nous avons pu trÃ¨s simplement filtrer les produits qui nous intÃ©ressent ainsi que modifier la structure de nos dates, ainsi toutes nos questions dans notre dashboard auront le mÃªme format de date.ConclusionEn Ã©vitant les piÃ¨ges courants comme la "SQL obsession", une architecture de projet mal dÃ©finie ou encore la duplication de la logique de filtrage, vous pouvez crÃ©er des dashboards Metabase plus accessibles, maintenables et collaboratifs.Utiliser l'interface de Metabase pour construire vos questions permet non seulement de simplifier le processus de crÃ©ation, mais aussi de rendre vos analyses de donnÃ©es plus comprÃ©hensibles pour toute votre Ã©quipe. En adoptant ces bonnes pratiques, vous assurerez la pÃ©rennitÃ© et l'efficacitÃ© de vos dashboards, facilitant ainsi la prise de dÃ©cision basÃ©e sur les donnÃ©es dans votre organisation.âCopyright Â©2023 TheodoÂ FinTech. Tous droits rÃ©servÃ©s.EquipeNous rejoindreContactTheodoPolitique de confidentialitÃ©Mentions lÃ©gales