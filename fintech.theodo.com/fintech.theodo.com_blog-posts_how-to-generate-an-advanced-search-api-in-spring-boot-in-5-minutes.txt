How to generate an advanced search API in Spring Boot in 5 minutes
 Â Sipios devient TheodoÂ FinTech, lâentitÃ© experte Services Financiers du groupe Theodo 
ClientsOffresMobile Wealth ManagementFintechÂ Due DiligenceMVPÂ at scaleConception et design UX/UIProgramme d'APIsationFinTech as a serviceExpertisesReactJSOpen BankingSpring BootKotlinBlog

Tech

BusinessCarriÃ¨re

Equipe


Nous rejoindreContactHow to generate an advanced search API in Spring Boot in 5 minutes2 minutesMis Ã  jour le15/9/2019Share this postIn this article, you will learn how to use the spring-search library to provide search endpoints to your JPA entities in Spring Boot.#Kotlin#Open Source#Spring BootWe just released our first open source library : Spring-search.Spring-search provides a simple yet advanced query language to perform searches on a JPA entity.Â For example, let's say you have the following Car model :
Our example is in Java, in order to show that spring-search works on any Spring Boot project. See our Github repository for a Kotlin example.Â And the following Options model :
Â You want to get cars whose brand is "Aston Martin"Â orÂ whose price is more than 10000$ and with an automatic transmission.With Spring-search, the query : /search=(brand:'Aston Martin' OR price>100000) AND options.transmission:Auto will provide the desired result.How do I install spring-search in my Spring Boot project ?In Maven projects, simply add the repo to your project inside yourÂ pom.xmlÂ file.
<dependency>
 Â  Â <groupId>com.sipios</groupId>
 Â  Â <artifactId>spring-search</artifactId>
 Â  Â <version>0.2.0</version>
</dependency>
In Gradle projects, addÂ implementation 'com.sipios:spring-search:0.2.0' in yourÂ build.gradleÂ file.
For other types of projects, see https://search.maven.org/artifact/com.sipios/spring-search/0.2.0/jar.
How do I use spring-search once it is installed ?Â Your repository should be annotated as aÂ RepositoryRestResourceÂ and should extendÂ JpaSpecificationExecutor
Import the library in your controller and use it in the following way
Â The previous query returns the following result :What operations are possible in my queries ?
The equal operation, using the : operator
The not equal operation, using the ! operator
The greater than and less than operators, respectively > and <
The starts with/ends with/contains operator, using *. It acts like the bash * expension.
The AND operator.
The OR operator.
Parenthesis can be used for grouping.
You can access a deep field of an object using the . notation. For instance options.transmission in our example.
For usage examples, see our Github repository for the project.I'd like a new feature, where can I ask for it ?We'd love to hear new ideas for this project!Feel free to create an issue on our Github issues page. Or you can even create a Pull Request on the repository, they will be greatly appreciated.Copyright Â©2023 TheodoÂ FinTech. Tous droits rÃ©servÃ©s.EquipeNous rejoindreContactTheodoPolitique de confidentialitÃ©Mentions lÃ©gales