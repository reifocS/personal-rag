Docker compose stop VS down
 Â Sipios devient TheodoÂ FinTech, lâentitÃ© experte Services Financiers du groupe Theodo 
ClientsOffresMobile Wealth ManagementFintechÂ Due DiligenceMVPÂ at scaleConception et design UX/UIProgramme d'APIsationFinTech as a serviceExpertisesReactJSOpen BankingSpring BootKotlinBlog

Tech

BusinessCarriÃ¨re

Equipe


Nous rejoindreContactDocker compose stop VS down4 minutesMis Ã  jour le22/3/2024Share this postL'article explore les nuances entre docker-compose stop et docker-compose down, soulignant leurs effets sur les conteneurs Docker et quand les utiliser pour Ã©viter les pertes de donnÃ©es.#Docker#DevOpsLaura PedenaudSoftware EngineerIntroductionPremier projet, un flux de test local mal maitrisÃ© et je casse la preprod. La principale root cause ? Je ne connaissais pas bien la diffÃ©rence entre docker-compose stop et docker-compose down .Il y a quelques jours, jâai rejoint une association pour les aider Ã  dÃ©velopper un projet open-source. A la dÃ©couverte du projet, lorsque jâai voulu lancer lâapplication pour la premiÃ¨re fois, jâai Ã©tÃ© faire un tour du cÃ´tÃ© du Makefile. Dans lequel jâai dÃ©couvert quâon exÃ©cutait toujours un docker-compose down pour stopper lâapplication. SitÃ´t, les souvenirs de mon erreur Ã©voquÃ©e ci-dessus (et expliquÃ©e dans la suite de lâarticle ð ) me reviennent et les questions affluent : pourquoi ne pas plutÃ´t utiliser un docker-compose stop ? Est-ce que lâun est meilleur que lâautre ? Finalement dans quel contexte est-il prÃ©fÃ©rable dâutiliser lâun plutÃ´t que lâautre ?Stop, down, quâest ce que Ã§a fait ?DownLa commande docker-compose down stoppe et supprime les containers, networks, volumes et images dÃ©finies dans votre docker-compose.yml . Ce fichier yaml permet de dÃ©crire les services, les rÃ©seaux, les volumes et d'autres configurations nÃ©cessaires pour exÃ©cuter une application composÃ©e de plusieurs conteneurs Docker.Si on rÃ©sume, le down reverse les effets de docker-compose up.âdocker-compose upDocker Image: C'est le modÃ¨le de base Ã  partir duquel des conteneurs sont crÃ©Ã©s. Il contient le code, les dÃ©pendances et la configuration nÃ©cessaires pour exÃ©cuter une application.Docker Container: Ce sont des instances en cours d'exÃ©cution d'une image Docker. Chaque conteneur a son propre systÃ¨me de fichiers et peut Ãªtre dÃ©marrÃ©, arrÃªtÃ©, dÃ©placÃ© ou supprimÃ© de maniÃ¨re indÃ©pendante.Docker Volume: C'est un espace de stockage persistant qui peut Ãªtre montÃ© sur un conteneur. Il permet aux donnÃ©es de survivre aux cycles de vie des conteneurs. Cela implique le "partage" d'un dossier local entre l'hÃ´te et le conteneur Docker. Contrairement Ã  une simple copie, il s'agit d'une synchronisation en temps rÃ©el, ce qui signifie que les modifications apportÃ©es Ã  ce dossier sont immÃ©diatement reflÃ©tÃ©es sur le disque tant pour le conteneur que pour l'hÃ´te.Docker Network: Un rÃ©seau Docker est une infrastructure virtuelle permettant la communication entre les conteneurs Docker, qu'ils soient sur le mÃªme hÃ´te ou sur diffÃ©rents hÃ´tes Docker.StopLa commande docker-compose stop elle, arrÃªte les conteneurs associÃ©s aux services dÃ©finis dans le fichier docker-compose.yml sans supprimer les autres ressources telles que les rÃ©seaux, les volumes, etc.Les conteneurs sont arrÃªtÃ©s, mais conservent leur Ã©tat, ce qui signifie que les donnÃ©es stockÃ©es dans les conteneurs (par exemple, dans des volumes Docker) restent intactes. Il faut bien comprendre que ce sont les ressources associÃ©es (volume, config rÃ©seau) qui gardent leur Ã©tat. Le conteneur en lui mÃªme, en particulier sa mÃ©moire (~RAM), est perdue.Les conteneurs peuvent Ãªtre redÃ©marrÃ©s ultÃ©rieurement en utilisant la commande docker-compose start.Cette commande est utile lorsque vous souhaitez arrÃªter temporairement les conteneurs sans perdre les donnÃ©es ou les configurations associÃ©es. Les gens utilisent souvent docker-compose stop par dÃ©faut car câest plus rapide (Ã  la fois dâarrÃªter et remonter le conteneur), surtout sâil y a des gros volumes de fichiers.Dans quel contexte les utiliser au mieux ?Dans quel cas docker-compose down peut mâaider ?En cherchant un peu, jâai trouvÃ© un exemple dans lequel il est intÃ©ressant dâutiliser un docker-compose down. Le 15 septembre 2016, @wting poste un message sur github : lors de l'utilisation de docker-compose build, les conteneurs ne sont pas correctement reconstruits, ce qui entraÃ®ne des problÃ¨mes avec un conteneur Varnish en raison de lock files obsolÃ¨tes.@denephin lui rÃ©pond que lâerreur vient trÃ¨s certainement du fait que le lock file est dans un volume et lui conseille de faire un docker-compose down pour supprimer les anciens containers et leurs volumes avant de relancer un up qui en crÃ©era des nouveaux.Lorsque Docker Compose reconstruit les conteneurs avec docker-compose build, il essaie de rÃ©utiliser les conteneurs existants si possible. Donc si la configuration d'un conteneur n'a pas changÃ©, Docker Compose peut simplement redÃ©marrer le conteneur existant au lieu d'en crÃ©er un nouveau. Dans ce cas, mÃªme si docker-compose build est exÃ©cutÃ©, les fichiers persistants dans le container Varnish, tels que les lock files, ne sont pas automatiquement nettoyÃ©s. @wting aurait aussi pu utiliser docker-compose up --force-recreate , pour forcer la recrÃ©ation de tous les conteneurs, mÃªme si leur configuration n'a pas changÃ©.En utilisant docker-compose down, on est assurÃ© que notre environnement est dans un Ã©tat propre et prÃªt Ã  Ãªtre reconstruit Ã  partir de zÃ©ro.Dans quel cas docker-compose down peut me porter prÃ©judice ?Vous vous souvenez quand je vous ai dit que jâavais cassÃ© la preprod ? VoilÃ  comment câest arrivÃ©. Une migration liquidbase avait Ã©tÃ© faÃ®te rÃ©cemment et nous voulions finalement changer le nom du fichier de migration car il contenait un caractÃ¨re spÃ©cial qui bloquait les utilisateurs de windows (en lâoccurrence un de nos Product Owner).Jâavais pris lâhabitude dâutiliser docker-compose down dans mon flux de test en local. Jâavais cru le changement de nom de fichier trivial, il ne lâÃ©tait pas. Câest Ã  dire quâil ne suffisait pas de changer le nom de fichier et relancer une migration. Or Ã©tant donnÃ© mon flux de test, je nâai pas pu mâen rendre compte lors de mon test en local.En effet, le docker-compose down supprime image et volumes, donc ma DB. Ainsi lorsque jâai lancÃ© mon application en local pour tester mes changements, ma DB Ã©tait re-gÃ©nÃ©rÃ©e localement et donc il nây avait aucun conflit avec le nom du fichier. Une toute autre histoire quand jâai mergÃ© en prÃ©prod et que jâai cassÃ© lâenvironnementâ¦ConclusionEn conclusion, docker-compose stop est utile lorsque vous souhaitez simplement arrÃªter les conteneurs sans perdre les donnÃ©es persistantes ou les configurations associÃ©es. Cela permet de redÃ©marrer les conteneurs ultÃ©rieurement sans avoir Ã  reconstruire entiÃ¨rement l'environnement.L'utilisation de docker-compose down peut Ãªtre dangereuse et il faut bien en comprendre les consÃ©quences. Elle est appropriÃ©e lorsque vous avez besoin de nettoyer complÃ¨tement votre environnement Docker. Par exemple dans le cas oÃ¹ on souhaite supprimer une base de donnÃ©e locale ou faire un nettoyage pour changer de projet.âSourcesdocker-compose up, down, stop start difference'Docker Compose Down' -- Guide To Stopping and Removing Docker ContainersDo you need to do docker-compose down every time you change your dockerfile before doing docker-compose up?âCopyright Â©2023 TheodoÂ FinTech. Tous droits rÃ©servÃ©s.EquipeNous rejoindreContactTheodoPolitique de confidentialitÃ©Mentions lÃ©gales