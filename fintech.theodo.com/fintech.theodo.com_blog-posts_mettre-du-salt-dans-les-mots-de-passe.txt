Mettre du sel dans les mots de passe
 Â Sipios devient TheodoÂ FinTech, lâentitÃ© experte Services Financiers du groupe Theodo 
ClientsOffresMobile Wealth ManagementFintechÂ Due DiligenceMVPÂ at scaleConception et design UX/UIProgramme d'APIsationFinTech as a serviceExpertisesReactJSOpen BankingSpring BootKotlinBlog

Tech

BusinessCarriÃ¨re

Equipe


Nous rejoindreContactMettre du sel dans les mots de passe10 minutesMis Ã  jour le8/7/2024Share this postExplorons lâÃ©volution des techniques pour sÃ©curiser les mots de passe web, soulignant lâimportance dâune protection solide pour les donnÃ©es utilisateurs. DÃ©couvrez comment rendre chaque mot de passe unique et rÃ©sistant aux attaques.#Security#bcrypt#PasswordOlivier GodonSoftware EngineerEn dÃ©but dâannÃ©e, Camille Fauchier publiait son guide dâimplÃ©mentation dâauthentification JWT avec Passport dans Nest.js. Et je remarquais lâutilisation des mÃ©thodes bcrypt.hash et bcrypt.compare pour respectivement crÃ©er un hash du mot de passe et comparer la saisie de lâutilisateur Ã  ce hash lors dâune authentification.Je voulais comprendre prÃ©cisÃ©ment comment fonctionne le hachage de mot de passe de bcrypt et sa gestion du salt. Cela aurait pu Ãªtre lâunique sujet de cet article. Mais avant dâen arriver lÃ , jâaimerais revenir sur les diffÃ©rentes mÃ©thodes de transformation des mots de passe dans un usage web au fil du temps.Cet article nâest pas tout Ã  fait tech, plutÃ´t un aller vers le passÃ© pour mieux revenir dans le prÃ©sent.La lumiÃ¨re futâ¦ mais tout Ã©tait trop clairAu sein dâun site web, quand on veut permettre Ã  un utilisateur de se connecter Ã  un service via un couple formÃ© dâun identifiant et dâun mot de passe, on peut stocker ces informations dans une base de donnÃ©es.Seulement voilÃ , si la table qui contient les identifiants et mots de passe se retrouve entre de mauvaises mains, alors celui qui les dÃ©tient peut, sur cette application au moins, se connecter avec les comptes dont il connaÃ®t le couple identifiant/mot de passe.Mais qui pourrait avoir accÃ¨s Ã  cette table ?On pense dâabord Ã  des personnes malintentionnÃ©es qui parviendraient Ã  pÃ©nÃ©trer dans le systÃ¨me.Mais il faut aussi compter sur les employÃ©s du service qui ont accÃ¨s Ã  la base de donnÃ©es, ce qui est dâautant plus problÃ©matique si lâutilisateur a le mÃªme mot de passe sur diffÃ©rents services (ce qui, rappelons-le, est une trÃ¨s mauvaise pratique !).Alors hachons !Aussi, la bonne pratique est devenue de transformer un mot de passe avec des mÃ©thodes de hachage (citons MD5, SHA-1 dÃ©sormais abandonnÃ©s mais aussi Eksblowfish qui est utilisÃ© par bcrypt). Une mÃ©thode de hachage prend en entrÃ©e un mot de passe et fournit en retour une chaÃ®ne de caractÃ¨res de maniÃ¨re Ã  ce quâon ne puisse pas ârevenir en arriÃ¨reâ, câest-Ã -dire quâon ne puisse pas retrouver le mot de passe Ã  partir de la chaÃ®ne de caractÃ¨re engendrÃ©e.Prenons en exemple MD5 pour comprendre comment fonctionne une fonction de hachage.âLe but dâune fonction de hachage est de fournir une empreinte de la valeur quâelle reprÃ©sente. Cette empreinte est dâune longueur fixe et qui potentiellement peut Ãªtre moins grande que la valeur initiale. Une fonction de hachage nâest donc pas injective. Il nâest ainsi pas possible de retrouver la valeur initiale Ã  partir de la valeur du hash. Une fonction de hachage est Ã  distinguer dâune mÃ©thode de chiffrage, laquelle ne perd aucune information et assure que son rÃ©sultat est dÃ©chiffrable.En appliquant une mÃ©thode de hachage simplement sur un mot de passe, on obtient toujours la mÃªme chaÃ®ne de caractÃ¨res.Cela a un impact immÃ©diat : si lâon connaÃ®t la mÃ©thode de hachage (par exemple SHA-1) et quâon dispose dâune liste des mots de passe hachÃ©s dâune application, alors on peut - en utilisant un gÃ©nÃ©rateur alÃ©atoire de mot de passe - reconstituer les mots de passe hachÃ©s auxquels correspondent ces entrÃ©es alÃ©atoires. Pour cela on peut utiliser une rainbow table qui associe le mot de passe Ã  une chaÃ®ne de caractÃ¨res rÃ©sultante.Rainbow tableUne rainbow table est construite Ã  partir dâune liste de mots de passe potentiels auxquels est appliquÃ©e la mÃ©thode de hachage et dont le rÃ©sultat subit une mÃ©thode de rÃ©duction, puis la mÃ©thode de hachage et une autre mÃ©thode de rÃ©duction, et Ã©ventuellement encore plusieurs fois le couple mÃ©thode de hachage et mÃ©thode de rÃ©duction. Seuls les mots de passe dâentrÃ©e et les rÃ©ductions finales sont stockÃ©s dans la rainbow table, ce qui permet de limiter la mÃ©moire nÃ©cessaire.Voici une ligne dâune rainbow table exemple pour le mot de passe initial mypassword, la mÃ©thode de hachage MD5. Les mÃ©thodes de rÃ©duction conservent la longueur du mot de passe. Par souci de lisibilitÃ©, on applique uniquement 3 fois la mÃ©thode de hachage suivie Ã  chaque fois par une mÃ©thode de rÃ©duction pour rÃ©duire le hash Ã  une chaÃ®ne de caractÃ¨re de mÃªme nature que le mot de passe (ici une chaÃ®ne de caractÃ¨res composÃ©e uniquement de lettres minuscules). Pour cette ligne, seuls sont stockÃ©s mypassword en entrÃ©e et jmtexivpnb en sortie.ââA partir dâun hash, on applique la derniÃ¨re rÃ©duction et on cherche si le rÃ©sultat existe dans la rainbow table, si câest le cas alors câest reduction2 qui devrait Ãªtre le mot de passe initial :Si par exemple cette rÃ©duction est jmtexivpnb, alors on part du mot de passe initial mypassword, on calcule le 1er hash, la 1Ã¨re rÃ©duction, le 2Ã¨me hash et enfin la 2Ã¨me rÃ©duction et alors on sait que le mot de passe initial est possiblement lywzdjkaqnSi cette rÃ©duction nâest pas dans la rainbow table, alors on applique au hash lâavant derniÃ¨re rÃ©duction, la mÃ©thode de hachage et enfin la derniÃ¨re rÃ©duction. On cherche alors le rÃ©sultat dans la rainbow table et si elle est prÃ©sente alors le mot de passe peut Ãªtre la reduction1 :Si cette rÃ©duction est jmtexivpnb, alors on applique au mot de passe initial le 1er hash et la 1Ã¨re rÃ©duction et tfsnyrwexo est possiblement le mot de passeEnfin si cette rÃ©duction nâÃ©tait pas non plus prÃ©sente, on applique toute la chaÃ®ne et si la rÃ©duction est prÃ©sente dans la rainbow table, le mot de passe est potentiellement le mot de passe initial :si cette rÃ©duction est jmtexivpnb alors le mot de passe candidat est mypasswordLes rÃ©ductions intermÃ©diaires, qui ont le mÃªme nombre de caractÃ¨res que le mot de passe testÃ© et sont formÃ©es Ã  partir du mÃªme ensemble de caractÃ¨res, assurent que pour un mÃªme mot de passe on en teste finalement plusieurs. Câest pourquoi plus il y a dâÃ©tapes hachage-rÃ©duction, moins il est nÃ©cessaire dâavoir dâentrÃ©es dans la rainbow table mais plus il y aura dâÃ©tapes de calcul pour retrouver le mot de passe correspondant Ã  un hash.On peut alors retrouver les mots de passe originaux en reconnaissant les mots de passe hachÃ©s. Ce nâest donc pas suffisant en cas de fuite de donnÃ©es : les mots de passe restent retrouvables.Du sel, pas uniquement pour les pÃ¢tes Ã  lâeauAlors on a eu recours Ã  du âsaltâ. Si on veut utiliser la mÃ©thode SHA-1 (uniquement pour lâexemple, SHA-1 nâÃ©tant plus recommandÃ©), on peut modifier le mot de passe en le concatÃ©nant avec du sel (âsaltâ en anglais), avant le mot de passe et aprÃ¨s le mot de passe. Par exemple on peut toujours ajouter âsaltBefore-â avant le mot de passe et â-saltAfterâ aprÃ¨s. La chaÃ®ne de caractÃ¨re stockÃ©e en base de donnÃ©e sera alors le rÃ©sultat de sha1("saltBefore-" + password + "-saltAfter")Si les chaÃ®nes de caractÃ¨res âsaltBefore-â et â-saltAfterâ sont dans le code, alors pour construire une rainbow table il faut connaÃ®tre Ã  la fois :la mÃ©thode de hachage (contenue dans le code) + les salt (contenus dans des secrets) : lâensemble permet de construire la mÃ©thode de hachage utilisÃ©e pour la construction dâune rainbow tableles chaÃ®nes de caractÃ¨res rÃ©sultant du hash (contenus dans une base de donnÃ©es)Lâattaque pas rainbow table devient plus compliquÃ©e parce que la rainbow table doit Ãªtre construite spÃ©cifiquement pour cette mÃ©thode de hachage (et donc le salt utilisÃ©).Cependant, deux utilisateurs qui ont le mÃªme mot de passe ont la mÃªme chaÃ®ne de caractÃ¨res stockÃ©e en base de donnÃ©es. Si lâun est connu, lâautre aussi.Changeons de salt pour chaque mot de passePour Ã©viter que deux mots de passe identiques soient reprÃ©sentÃ©s par la mÃªme chaÃ®ne de caractÃ¨res une fois hachÃ©s, il suffit de changer de salt pour chaque mot de passe. De la sorte, si deux utilisateurs ont le mÃªme mot de passe, alors le hash stockÃ© sera diffÃ©rent.Câest ce que propose la mÃ©thode bcrypt.hash qui permet par dÃ©faut dâajouter un salt alÃ©atoire lors de chaque gÃ©nÃ©ration de mot de passe. Ensuite, pour comparer le mot de passe saisi par lâutilisateur avec le hash sauvegardÃ© en base de donnÃ©es la mÃ©thode bcrypt.compare applique le hash Ã  la saisie utilisateur et compare le rÃ©sultat Ã  la sauvegarde.Mais comment la mÃ©thode bcrypt.compare connaÃ®t-elle le salt utilisÃ© lors du hash initial ? Pour cela voyons comment fonctionne bcrypt.hashLa mÃ©thode bcrypt.hash prend deux paramÃ¨tres dâentrÃ©e :le premier est une chaÃ®ne de caractÃ¨res reprÃ©sentant le mot de passe en clairle second est :soit un nombre entier reprÃ©sentant le coÃ»t numÃ©rique du calcul du hashsoit une chaÃ®ne de caractÃ¨res reprÃ©sentant le salt Ã  utiliser (lequel a Ã©tÃ© crÃ©Ã© avec la mÃ©thode bcrypt.genSalt dont lâunique paramÃ¨tre est un nombre entier reprÃ©sentant le coÃ»t numÃ©rique)Dans le premier cas le salt est engendrÃ© automatiquement, dans le second il est fourni Ã  la mÃ©thode.Utilisons la 2Ã¨me faÃ§on de faire. Et crÃ©ons un hash Ã  partir dâun salt engendrÃ© explicitement.âLa mÃ©thode bcrypt.hash fournit donc en sortie une chaÃ®ne de caractÃ¨res qui contient en prÃ©fixe le salt utilisÃ©. Cette chaÃ®ne de caractÃ¨re appelÃ©e hash est en fait la concatÃ©nation du salt et du hash gÃ©nÃ©rÃ©.Ainsi lorsque, pour vÃ©rifier si la saisie utilisateur correspond bien au hash stockÃ©, on fournit Ã  la mÃ©thode bcrypt.compare le mot de passe en clair saisi par lâutilisateur ainsi que le hash avec lequel le comparer, le salt utilisÃ© est fourni directement dans le hash.Et donc pour la retrouver un mot de passe Ã  partir dâun hash ?Puisquâaucun salt nâest identique, aucune gÃ©nÃ©ration de rainbow table unique nâest possible. Lâutilisation de rainbow table impliquerait de crÃ©er une rainbow table par hash/salt.Cependant crÃ©er et utiliser une rainbow table serait trÃ¨s lent puisquâon lâa vu, cela consiste Ã  appliquer de nombreuses fois la mÃ©thode de hachage, ce qui pour bcrypt est trÃ¨s coÃ»teux en temps et mÃªme rÃ©glable via le paramÃ¨tre entier reprÃ©sentant le coÃ»t numÃ©rique.En revanche, en connaissant la chaÃ®ne de caractÃ¨re rÃ©sultante de la mÃ©thode bcrypt.hash, on connaÃ®t le code associÃ© Ã  lâalgorithme de hash utilisÃ© (dans lâexemple ci-dessus $2b$) et le salt utilisÃ©. PlutÃ´t que de construire pour ce hash une rainbow table trÃ¨s coÃ»teuse en temps Ã  la crÃ©ation comme Ã  lâutilisation, câest chaque mot de passe candidat qui pourrait Ãªtre hachÃ© pour vÃ©rifier une concordance.En rÃ©sumÃ©La bonne pratique actuelle est donc dâutiliser une mÃ©thode de hachage avec salt alÃ©atoire pour hacher chaque mot de passe, par exemple en utilisant bcrypt.Le salt alÃ©atoire diffÃ©rent pour chaque mot de passe est stockÃ© dans le hash. Le temps nÃ©cessaire pour hacher un mot de passe avec bcrypt protÃ¨ge de la crÃ©ation et utilisation dâune rainbow table spÃ©cifique Ã  un salt donnÃ©.Pour annihiler le risque dâune recherche dâun mot de passe associÃ© Ã  un hash, il est possible de sÃ©parer le stockage du salt et du hash de chaque mot de passe dans des bases de donnÃ©es diffÃ©rentes afin de rendre plus difficile la connaissance de la mÃ©thode de hachage utilisÃ©e.LiensLinkedin (2012) - pas de saltLes Echos (2018) - mot de passe en clairFonction de hachageeWatchers (2020)bcrypt wikipediaSHA-1Wikipedia : Rainbow tableEn complÃ©ment : Rainbow tableâCopyright Â©2023 TheodoÂ FinTech. Tous droits rÃ©servÃ©s.EquipeNous rejoindreContactTheodoPolitique de confidentialitÃ©Mentions lÃ©gales